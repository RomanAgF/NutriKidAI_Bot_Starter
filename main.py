# –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–∑–∂–µ –≤—Å—Ç–∞–≤–∏–º
import os
from dotenv import load_dotenv
load_dotenv()
import telebot
import openai
from telebot import types
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
print("=== Debug Information ===")
print(f"Current working directory: {os.getcwd()}")
print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"OPENAI_API_KEY: {OPENAI_API_KEY}")
print("=======================")

openai.api_key = OPENAI_API_KEY

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
feedback_list = []

class User:
    def __init__(self, user_id):
        self.user_id = user_id
        self.child_age = None
        self.allergies = []
        self.last_consultation = None

def get_user(user_id):
    if user_id not in user_data:
        user_data[user_id] = User(user_id)
    return user_data[user_id]

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
BABY_FOOD_KNOWLEDGE = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–µ—Ç—Å–∫–æ–º—É –ø–∏—Ç–∞–Ω–∏—é, —Å–ª–µ–¥—É–µ—à—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.
–í—Å–µ–≥–¥–∞ —É—Ç–æ—á–Ω—è–π: '–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–µ–¥–∏–∞—Ç—Ä–æ–º –ø–µ—Ä–µ–¥ –≤–≤–µ–¥–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤'.

6–º: –æ–≤–æ—â–∏ (–∫–∞–±–∞—á–æ–∫, –±—Ä–æ–∫–∫–æ–ª–∏, —Ü–≤–µ—Ç–Ω–∞—è –∫–∞–ø—É—Å—Ç–∞)
7–º: –∫–∞—à–∏ –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ (—Ä–∏—Å, –≥—Ä–µ—á–∫–∞, –∫—É–∫—É—Ä—É–∑–∞)
8–º: –º—è—Å–æ (–∏–Ω–¥–µ–π–∫–∞, –∫—Ä–æ–ª–∏–∫)
9–º: —Ñ—Ä—É–∫—Ç—ã (—è–±–ª–æ–∫–æ, –≥—Ä—É—à–∞, –±–∞–Ω–∞–Ω)
10–º: —Ä—ã–±–∞ (—Ç—Ä–µ—Å–∫–∞, —Ö–µ–∫)
12–º: —Ç–≤–æ—Ä–æ–≥, –∫–µ—Ñ–∏—Ä

–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ –≥–æ–¥–∞: –º–µ–¥, –æ—Ä–µ—Ö–∏, —Ü–µ–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ, —è–π—Ü–∞ –¥–æ 8–º.
"""

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user = get_user(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üë∂ –ü—Ä–æ—Ñ–∏–ª—å", "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç", "ü§ñ –í–æ–ø—Ä–æ—Å", "üìù –û—Ç–∑—ã–≤")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø NutriKid ‚Äî –±–æ—Ç –ø–æ –¥–µ—Ç—Å–∫–æ–º—É –ø–∏—Ç–∞–Ω–∏—é. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

# –ü—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(func=lambda m: m.text == "üë∂ –ü—Ä–æ—Ñ–∏–ª—å")
def set_profile(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ –≤ –º–µ—Å—è—Ü–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6):")
    bot.register_next_step_handler(msg, process_age)

def process_age(message):
    try:
        age = int(message.text)
        if age < 4 or age > 60:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 4 –¥–æ 60 –º–µ—Å—è—Ü–µ–≤.")
            return
        user = get_user(message.from_user.id)
        user.child_age = age
        bot.send_message(message.chat.id, f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç {age} –º–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
@bot.message_handler(func=lambda m: m.text == "üçΩÔ∏è –†–µ—Ü–µ–ø—Ç")
def get_recipe(message):
    user = get_user(message.from_user.id)
    if not user.child_age:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å üë∂")
        return

    prompt = f"{BABY_FOOD_KNOWLEDGE}\n–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {user.child_age} –º–µ—Å—è—Ü–µ–≤\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=800
        )
        reply = response.choices[0].message.content
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {str(e)}")

# AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
@bot.message_handler(func=lambda m: m.text == "ü§ñ –í–æ–ø—Ä–æ—Å")
def ask_question(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–µ—Ç—Å–∫–æ–º—É –ø–∏—Ç–∞–Ω–∏—é:")
    bot.register_next_step_handler(msg, process_question)

def process_question(message):
    prompt = f"{BABY_FOOD_KNOWLEDGE}\n–í–æ–ø—Ä–æ—Å: {message.text}"
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=800
        )
        reply = response.choices[0].message.content
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ: {str(e)}")

# –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@bot.message_handler(func=lambda m: m.text == "üìù –û—Ç–∑—ã–≤")
def get_feedback(message):
    msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ:")
    bot.register_next_step_handler(msg, save_feedback)

def save_feedback(message):
    feedback_list.append((message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", message.text, datetime.now()))
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè")

# –ó–∞–ø—É—Å–∫
bot.infinity_polling()
